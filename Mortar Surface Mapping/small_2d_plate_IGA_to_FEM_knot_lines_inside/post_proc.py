import numpy as np

mpMappingMatrixSlave = np.array([
    [0.00148148, 0.000740741, 0.000740741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.000740741, 0.00507626, 0.00203674, 0.00179739, 0.000501389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0.000740741, 0.00203674, 0.00726881, 0.00212448, 0, 0.00159767, 0.000769186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0.00179739, 0.00212448, 0.0105041, 0.00179739, 0.00132034, 0, 0.00133021, 0, 0.00213435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0.000501389, 0, 0.00179739, 0.00507626, 0, 0, 0, 0.000740741, 0.00203674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0.00159767, 0.00132034, 0, 0.00745156, 0.00171938, 0.00117792, 0, 0, 0.00163626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0.000769186, 0, 0, 0.00171938, 0.00677209, 0, 0, 0, 0.00261686, 0.00166667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0.00133021, 0, 0.00117792, 0, 0.00695536, 0, 0.00146719, 0.00151864, 0, 0.00146141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0.000740741, 0, 0, 0, 0.00148148, 0.000740741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0.00213435, 0.00203674, 0, 0, 0.00146719, 0.000740741, 0.00700786, 0, 0, 0.000628838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0.00163626, 0.00261686, 0.00151864, 0, 0, 0.0167551, 0.00262182, 0.00249924, 0.00159096, 0.00162023, 0.00265109, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0.00166667, 0, 0, 0, 0.00262182, 0.00673534, 0, 0.001701, 0, 0, 0.000745852, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0.00146141, 0, 0.000628838, 0.00249924, 0, 0.00625616, 0, 0, 0.00166667, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00159096, 0.001701, 0, 0.00711366, 0.00104836, 0, 0.00155332, 0.00122001, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00104836, 0, 0.00709815, 0.00172405, 0, 0, 0.00118921, 0.0015163, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00172405, 0.00678144, 0, 0, 0, 0.000739632, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000745852, 0, 0.00155332, 0, 0.00718011, 0.00210346, 0, 0.000740741, 0.00203674, 0, 0,0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00122001, 0.00118921, 0, 0.00210346, 0.0101801, 0.00207266, 0, 0.00179739, 0.00179739],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0015163, 0.000739632, 0, 0.00207266, 0.00710607, 0, 0, 0.00203674, 0.000740741],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000740741, 0, 0, 0.00148148, 0.000740741, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00203674, 0.00179739, 0, 0.000740741, 0.00507626, 0.000501389, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00179739, 0.00203674, 0, 0.000501389, 0.00507626, 0.000740741],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000740741, 0, 0, 0.000740741, 0.00148148]
])

mpMappingMatrixProjector = [
    [0, 0, 0, 0, 0, 2.43865e-07, 9.02301e-06, 5.47478e-05, 0, 5.12117e-06, 0.000130956, 0.000659534, 0, 1.76802e-05, 0.000383478, 0.00170218],
    [0, 1.39662e-08, 6.37122e-07, 4.76515e-06, 0, 2.25643e-05, 0.000433021, 0.00153286, 0, 7.14786e-05, 0.00130935, 0.00433234, 0, 4.50696e-05, 0.000652012, 0.00174841],
    [0, 0, 0, 0, 0, 6.84851e-05, 0.000486702, 0.000494365, 0, 0.00043191, 0.00288336, 0.00267142, 0, 0.000607319, 0.00377617, 0.00311789],
    [0, 8.5417e-05, 0.000641655, 0.000569572, 0, 0.00055502, 0.00435942, 0.00436694, 0, 0.000542756, 0.00430035, 0.00434203, 0, 7.88645e-05, 0.000609884, 0.000556393],
    [0, 4.50696e-05, 0.000652012, 0.00174841, 0, 7.14786e-05, 0.00130935, 0.00433234, 0, 2.25643e-05, 0.000433021, 0.00153286, 0, 1.39662e-08, 6.37122e-07, 4.76515e-06],
    [0, 4.40627e-06, 1.33851e-05, 2.53494e-06, 0, 0.000792259, 0.00231172, 0.000494125, 0, 0.00180478, 0.00542334, 0.00119843, 0, 0.00057815, 0.00183777, 0.000442213],
    [0, 0, 0, 0, 1.54321e-07, 0.000310578, 0.000470737, 2.51059e-05, 2.00617e-06, 0.00190085, 0.00304831, 0.00019894, 4.32099e-06, 0.00272551, 0.00450829, 0.000349393],
    [0, 0.000575434, 0.00183274, 0.000441009, 0, 0.00169352, 0.00509424, 0.0011326, 0, 0.000689404, 0.00200811, 0.000433961, 0, 2.08196e-06, 6.38908e-06, 1.2336e-06],
    [0, 1.76802e-05, 0.000383478, 0.00170218, 0, 5.12117e-06, 0.000130956, 0.000659534, 0, 2.43865e-07, 9.02301e-06, 5.47478e-05, 0, 0, 0, 0],
    [0, 0.000565979, 0.00360847, 0.00306467, 0, 0.000399144, 0.00274699, 0.00262536, 0, 6.20122e-05, 0.000458746, 0.000484343, 0, 0, 0, 0],
    [3.09396e-05, 0.00155733, 0.00154177, 2.87648e-05, 0.0001367, 0.00669332, 0.00662634, 0.000126837, 0.000134207, 0.00669084, 0.00665606, 0.000128495, 2.98153e-05, 0.0015518, 0.00154789, 2.90904e-05],
    [0, 0, 0, 0, 2.45955e-05, 0.00046637, 0.000308684, 1.54321e-07, 0.000195993, 0.0030287, 0.00189334, 2.00617e-06, 0.000344944, 0.00448416, 0.00271741, 4.32099e-06],
    [4.32099e-06, 0.00261364, 0.00421109, 0.000303089, 2.00617e-06, 0.0017712, 0.00274043, 0.000159716, 1.54321e-07, 0.000281064, 0.000407261, 1.83465e-05, 0, 0, 0, 0],
    [1.48361e-06, 7.53978e-06, 2.43113e-06, 0, 0.000451518, 0.00209421, 0.000717533, 0, 0.00115566, 0.00521172, 0.00173321, 0, 0.000440833, 0.00183401, 0.000577173, 0],
    [0.000440417, 0.00183544, 0.000578034, 0, 0.00115337, 0.00520223, 0.00173015, 0, 0.000448613, 0.00208278, 0.000714191, 0, 1.41244e-06, 7.29224e-06, 2.37099e-06, 0],
    [0.000347315, 0.00450533, 0.0027267, 4.32099e-06, 0.000199534, 0.00306023, 0.00190746, 2.00617e-06, 2.52668e-05, 0.000472791, 0.000311777, 1.54321e-07, 0, 0, 0, 0],
    [0, 0, 0, 0, 0.00049016, 0.000475965, 6.60965e-05, 0, 0.00265197, 0.00283194, 0.000420235, 0, 0.00310051, 0.00372741, 0.000595944, 0],
    [0.000550032, 0.000596365, 7.63414e-05, 0, 0.004271, 0.00414442, 0.000512333, 0, 0.00428344, 0.0041703, 0.000517218, 0, 0.000554572, 0.000606076, 7.81624e-05, 0],
    [0.00308626, 0.00369064, 0.000587751, 0, 0.00263367, 0.00278664, 0.000410339, 0, 0.000486237, 0.000466542, 6.40701e-05, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 5.47478e-05, 9.02301e-06, 2.43865e-07, 0, 0.000659534, 0.000130956, 5.12117e-06, 0, 0.00170218, 0.000383478, 1.76802e-05, 0],
    [4.76515e-06, 6.37122e-07, 1.39662e-08, 0, 0.00153286, 0.000433021, 2.25643e-05, 0, 0.00433234, 0.00130935, 7.14786e-05, 0, 0.00174841, 0.000652012, 4.50696e-05, 0],
    [0.00174841, 0.000652012, 4.50696e-05, 0, 0.00433234, 0.00130935, 7.14786e-05, 0, 0.00153286, 0.000433021, 2.25643e-05, 0, 4.76515e-06, 6.37122e-07, 1.39662e-08, 0],
    [0.00170218, 0.000383478, 1.76802e-05, 0, 0.000659534, 0.000130956, 5.12117e-06, 0, 5.47478e-05, 9.02301e-06, 2.43865e-07, 0, 0, 0, 0, 0]
]

mpMappingMatrixProjector = np.array(mpMappingMatrixProjector)


# Calculate the inverse of the matrix
inverse_matrix = np.linalg.inv(mpMappingMatrixSlave)

map_mat = np.dot(inverse_matrix,mpMappingMatrixProjector)

vector = np.ones(16)

# Print the inverse matrix
print(np.dot(map_mat,vector))
